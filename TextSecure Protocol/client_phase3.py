# -*- coding: utf-8 -*-
"""Client_Phase3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11WB1dg2tVuVDCJ-BVxilW98iEibiHaZw
"""
"""
!pip install ecpy
!pip install sympy
!pip install pyprimes
!pip install pycryptodome
"""
import binascii
import hmac
import hashlib
from ecpy.curves import Curve, Point
import sys
from random import randint, seed
import warnings
import sympy
import random
import timeit
import math
from Crypto.Hash import SHA3_256, SHA256, HMAC
import requests
from Crypto.Cipher import AES
from Crypto import Random
from Crypto.Util.Padding import pad
from Crypto.Util.Padding import unpad
from Crypto.Hash import HMAC, SHA256
import json
import
API_URL = 'http://cryptlygos.pythonanywhere.com'

stuID = 24001
stuID_B = 23811

# create a long term key

seed(13)
E = Curve.get_curve('secp256k1')
n = E.order
p = E.field
P = E.generator
a = E.a
b = E.b
print("Base point:\n", P)
print("p :", p)
print("a :", a)
print("b :", b)
print("n :", n)
print("P :", P)
QSer_long = Point(0xc1bc6c9063b6985fe4b93be9b8f9d9149c353ae83c34a434ac91c85f61ddd1e9,
                  0x931bd623cf52ee6009ed3f50f6b4f92c564431306d284be7e97af8e443e69a8c, E)
print("QSer_long :", QSer_long)

#sL = randint(2,n-1)
#lkey = sL * P

oldLkey_x = 78935412509210787886046173009592045557136874410576959068711189297698452513090
oldLkey_y = 99776368787574767431372136316428878523658736541484871971671172899608034035824
oldLkey = Point(oldLkey_x, oldLkey_y, E)
lkey = oldLkey
sL = 103054700508919303600107454939542778508963714994021468183592612736506363011453
print("Old_long: ", oldLkey)
print("sL: ", sL)

#s, h = SignGen(str(stuID).encode(), E, oldLkey)
k = randint(1, n-2)
print("k: ", k)
R = k * P
print("R: ", R)
print("Rx: ", R.x)
r = R.x % n
print("r: ", r)
h_ = SHA3_256.new(str.encode(str(stuID)) +
                  r.to_bytes((r.bit_length()+7)//8, byteorder='big'))
h = int.from_bytes(h_.digest(), byteorder='big') % n
print("h: ", h)
s = (sL * h + k) % n
print("s: ", s)

# 969963
try:
    mes = {'ID': stuID, 'H': h, 'S': s, 'LKEY.X': lkey.x, 'LKEY.Y': lkey.y}
    response = requests.put('{}/{}'.format(API_URL, "RegLongRqst"), json=mes)
    print(response.json())

    code = int(input())

    mes = {'ID': stuID, 'CODE': code}
    response = requests.put('{}/{}'.format(API_URL, "RegLong"), json=mes)
    print(response.json())
except Exception as e:
    print(e)

try:
    mes = {'ID_A': stuID, 'H': h, 'S': s}
    response = requests.get('{}/{}'.format(API_URL, "Status"), json=mes)
    print("Status ", response.json())
except Exception as e:
    print(e)

"""
###delete ephemeral keys
try:
  mes = {'ID': stuID, 'S': s, 'H': h}
  response = requests.get('{}/{}'.format(API_URL, "RstEKey"), json = mes)
  print(response.json())
except Exception as e:
  print(e)
"""

ekeyList = {}
print("Registering ephermeral keys...\n")
for i in range(10):
    print("Processing ephemeral key with ID ", i)
    si = randint(2, n-1)
    ekey = si * P
    ekeyList[i] = [si, ekey.x, ekey.y]
    concatQxy = str(ekey.x) + str(ekey.y)

    ki = randint(1, n-2)
    Ri = ki * P
    ri = Ri.x % n
    h_ = SHA3_256.new(str.encode(str(concatQxy)) +
                      ri.to_bytes((ri.bit_length()+7)//8, byteorder='big'))
    hi = int.from_bytes(h_.digest(), byteorder='big') % n
    si = (sL * hi + ki) % n
    try:
        mes = {'ID': stuID, 'KEYID': i, 'QAI.X': ekey.x,
               'QAI.Y': ekey.y, 'Si': si, 'Hi': hi}
        response = requests.put('{}/{}'.format(API_URL, "SendKey"), json=mes)
        print(response.json())
        print()
    except Exception as e:
        print(e)

# Sign student id B before generating session keys and messages
print("Signing stuID_B...\n")
print("stuID_B: ", stuID_B)
k_ = randint(1, n-2)
R_ = k_ * P
r_ = R_.x % n
_h_ = SHA3_256.new(str.encode(str(stuID_B)) +
                   r_.to_bytes((r_.bit_length()+7)//8, byteorder='big'))
h_2 = int.from_bytes(_h_.digest(), byteorder='big') % n
s_ = (sL * h_2 + k_) % n
print("s_ = ", s_)
print("h_2 = ", h_2)

try:
    # Get key of the Student B
    mes = {'ID_A': stuID, 'ID_B': stuID_B, 'S': s_, 'H': h_2}
    response = requests.get('{}/{}'.format(API_URL, "ReqKey"), json=mes)
    res = response.json()
    print(res)
except Exception as e:
    print(e)

# send message
I = res["i"]
J = res["j"]
QBJx = res["QBJ.x"]
QBJy = res["QBJ.y"]
Qb = Point(QBJx, QBJy, E)
sAi = ekeyList[int(I)][0]
QAx = ekeyList[int(I)][1]
QAy = ekeyList[int(I)][2]
Qa = Point(QAx, QAy, E)
T = sAi * Qb
U = str(T.x) + str(T.y) + "NoNeedToRunAndHide"
Kenc = SHA3_256.new(U.encode()).digest()
Kmac = SHA3_256.new(Kenc).digest()
cipher = AES.new(Kenc, AES.MODE_CTR)

mes = "test-1"
ctext_ = cipher.encrypt(str.encode(mes))
H = HMAC.new(Kmac, digestmod=SHA256)
H.update(ctext_)
ctext = cipher.nonce + ctext_ + H.digest()
msg = int.from_bytes(ctext, byteorder='big')

# Send message to student B
try:
    mes = {'ID_A': stuID, 'ID_B': stuID_B, 'I': I, 'J': J, 'MSG': msg}
    response = requests.put('{}/{}'.format(API_URL, "SendMsg"), json=mes)
    print(response.json())
except Exception as e:
    print(e)

# Recieving messages
for i in range(1):
    try:
        mes = {'ID_A': stuID, 'S': s, 'H': h}
        response = requests.get(
            '{}/{}'.format(API_URL, "ReqMsg_PH3"), json=mes)
        print(response.json())
        if (response.ok):  # Decrypt message
            response = response.json()
            IDB = response["IDB"]
            keyid = response["KEYID"]
            msg = response["MSG"]
            QBJx = response["QBJ.X"]
            QBJy = response["QBJ.Y"]
            Qb = Point(QBJx, QBJy, E)
            sAi = ekeyList[int(keyid)][0]
            QAx = ekeyList[int(keyid)][1]
            QAy = ekeyList[int(keyid)][2]
            Qa = Point(QAx, QAy, E)
            T = sAi * Qb
            U = str(T.x) + str(T.y) + "NoNeedToRunAndHide"
            Kenc = SHA3_256.new(U.encode()).digest()
            Kmac = SHA3_256.new(Kenc).digest()
            mes = msg.to_bytes((msg.bit_length() + 7) // 8, 'big')
            H = HMAC.new(Kmac, digestmod=SHA256)
            H.update(mes[8:-32])
            try:
                H.verify(mes[-32:])
                print("The message '%s' is authentic" % msg)
                cipher = AES.new(Kenc, AES.MODE_CTR, nonce=mes[0:8])
                mes_ = mes[8:-32]
                dtext_mes = cipher.decrypt(mes[8:-32])
                dtext = dtext_mes.decode('UTF-8')
                print("Decrypted text: ", dtext)
            except ValueError:
                print("The message or the key is wrong")
        else:
            break
    except Exception as e:
        print(e)

#################################################
# SEND MESSAGES FOR GRADING
#################################################
stuID = 24001
stuID_B = 18007
# Sign student id B before generatig session keys and messages
print("Signing stuID_B...\n")
print("stuID_B: ", stuID_B)
k_ = randint(1, n-2)
R_ = k_ * P
r_ = R_.x % n
_h_ = SHA3_256.new(str.encode(str(stuID_B)) +
                   r_.to_bytes((r_.bit_length()+7)//8, byteorder='big'))
h_2 = int.from_bytes(_h_.digest(), byteorder='big') % n
s_ = (sL * h_2 + k_) % n
print("s_ = ", s_)
print("h_2 = ", h_2)

msgList = {0: "The world is full of lonely people afraid to make the first move.",
           1: "I don’t like sand. It’s all coarse, and rough, and irritating. And it gets everywhere.",
           2: "Hate is baggage. Life’s too short to be pissed off all the time. It’s just not worth it.",
           3: "Well, sir, it’s this rug I have, it really tied the room together.",
           4: "Love is like taking a dump, Butters. Sometimes it works itself out. But sometimes, you need to give it a nice hard slimy push."}
print("\nSending messages for grading..\n")
for i in range(5):
    print("Checking status of student B with ID: ", stuID_B)
    try:
        # Get key of the Student B
        mes = {'ID_A': stuID, 'ID_B': stuID_B, 'S': s_, 'H': h_2}
        response = requests.get('{}/{}'.format(API_URL, "ReqKey"), json=mes)
        res = response.json()
        print(res)
    except Exception as e:
        print(e)
    # send message
    I = res["i"]
    J = res["j"]
    QBJx = res["QBJ.x"]
    QBJy = res["QBJ.y"]
    Qb = Point(QBJx, QBJy, E)
    sAi = ekeyList[int(I)][0]
    QAx = ekeyList[int(I)][1]
    QAy = ekeyList[int(I)][2]
    Qa = Point(QAx, QAy, E)
    T = sAi * Qb
    U = str(T.x) + str(T.y) + "NoNeedToRunAndHide"
    Kenc = SHA3_256.new(U.encode()).digest()
    Kmac = SHA3_256.new(Kenc).digest()
    mes = msgList[i]
    print("Sending message: ", mes)
    cipher = AES.new(Kenc, AES.MODE_CTR)
    ctext_ = cipher.encrypt(str.encode(mes))
    H = HMAC.new(Kmac, digestmod=SHA256)
    H.update(ctext_)
    ctext = cipher.nonce + ctext_ + Kmac
    msg = int.from_bytes(ctext, byteorder='big')
    # Send message to student B
    try:
        mes = {'ID_A': stuID, 'ID_B': stuID_B, 'I': I, 'J': J, 'MSG': msg}
        response = requests.put('{}/{}'.format(API_URL, "SendMsg"), json=mes)
        print(response.json())
    except Exception as e:
        print(e)
    print()
